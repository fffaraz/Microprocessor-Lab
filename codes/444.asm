.INCLUDE "M32DEF.INC"

.EQU LCDPORT = PORTB
.EQU LCDPORTDDR = DDRB
.EQU EN=2
.EQU RW=1
.EQU RS=0
.DEF LCDDATA = R31

.ORG 0
JMP RESET

.ORG 32
RESET:

LDI R16, LOW(RAMEND)
OUT SPL, R16
LDI R16, HIGH(RAMEND)
OUT SPH, R16

CALL lcd_init
CALL delay

LDI LCDDATA, 0x33
CALL lcd_cmd
CALL delay
LDI LCDDATA, 0x32
CALL lcd_cmd
CALL delay
LDI LCDDATA, 0x28
CALL lcd_cmd
CALL delay
LDI LCDDATA, 0x0E
CALL lcd_cmd
CALL delay
LDI LCDDATA, 0x01
CALL lcd_cmd
CALL delay
LDI LCDDATA, 0x06
CALL lcd_cmd
CALL delay

LDI LCDDATA, 'F'
CALL lcd_data
CALL delay
LDI LCDDATA, 'A'
CALL lcd_data
CALL delay
LDI LCDDATA, 'R'
CALL lcd_data
CALL delay
LDI LCDDATA, 'A'
CALL lcd_data
CALL delay
LDI LCDDATA, 'Z'
CALL lcd_data
CALL delay




lcd_cmd: // lcd_cmd(LCDDATA)
// high
LDI R16, 0xF0
AND R16, LCDDATA
OUT LCDPORT, R16
// en
SBI LCDPORT, EN
NOP
NOP
NOP
CBI LCDPORT, EN
// low
LDI R16,0x0F
AND R16, LCDDATA
SWAP R16
OUT LCDPORT, R16
// en
SBI LCDPORT, EN
NOP
NOP
NOP
CBI LCDPORT, EN
// clear
LDI R16,0x00
OUT LCDPORT, R16

RET

lcd_data: // lcd_data(LCDDATA)
// high
LDI R16, 0xF0
AND R16, LCDDATA
OUT LCDPORT, R16
// rs
SBI LCDPORT, RS
// en
SBI LCDPORT, EN
NOP
NOP
NOP
CBI LCDPORT, EN

// low
LDI R16,0x0F
AND R16, LCDDATA
SWAP R16
OUT LCDPORT, R16
// rs
SBI LCDPORT, RS
// en
SBI LCDPORT, EN
NOP
NOP
NOP
CBI LCDPORT, EN
// clear
LDI R16,0x00
OUT LCDPORT, R16

RET

lcd_init:
// PORT
SER R16
OUT LCDPORTDDR, R16
RET

delay:
LDI R31, 0xFF
delay_1:
LDI R30, 0xFF
delay_2:
NOP
NOP
NOP
NOP
NOP
DEC R30
BRNE delay_2
DEC R31
BRNE delay_1
RET
